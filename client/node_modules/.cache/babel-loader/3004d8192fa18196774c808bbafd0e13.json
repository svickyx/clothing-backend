{"ast":null,"code":"import { takeLatest, call, put, all } from 'redux-saga/effects'; //it listen for every action of a specific type that we pass to it\n//it create a non blocking call in order to not stop application to run \n// put is saga effects for creating action\n\nimport { firestore, convertCollectionsSnopshotToMap } from '../../firebase/firebase.utils';\nimport { fetchCollectionsSuccess, fetchCollectionsFailure } from './shop-actions';\nimport ShopActionTypes from './shop-types'; //generator function syntax is for saga, every generator function must have yield in it\n\nexport function* fetchCollectionsAsync() {\n  try {\n    const collectionRef = firestore.collection('collections');\n    const snopshot = yield collectionRef.get();\n    const collectionsMap = yield call(convertCollectionsSnopshotToMap, snopshot);\n    yield put(fetchCollectionsSuccess(collectionsMap));\n  } catch (error) {\n    yield put(fetchCollectionsFailure(error.message));\n  } //call 後面括號裡面，第一個para可以是一個method/function, 第二個para,是前面function的parameter\n  //yield call 是之前寫的const collectionsMap = convertCollectionsSnopshotToMap(snopshot);saga替代版本\n  //thunk version\n  // collectionRef.get().then(snopshot => {\n  //     const collectionsMap = convertCollectionsSnopshotToMap(snopshot);\n  //     dispatch(fetchCollectionsSuccess(collectionsMap));\n  // }).catch(error => dispatch(fetchCollectionsFailure(error.message)))\n\n}\nexport function* fetchCollectionsStart() {\n  yield takeLatest(ShopActionTypes.FETCH_COLLECTIONS_START, fetchCollectionsAsync);\n}\nexport function* shopSaga() {\n  yield all([call(fetchCollectionsStart)]);\n}","map":{"version":3,"sources":["/Users/vicky/Documents/clothing-saga/src/redux/shop/shop-sagas.js"],"names":["takeLatest","call","put","all","firestore","convertCollectionsSnopshotToMap","fetchCollectionsSuccess","fetchCollectionsFailure","ShopActionTypes","fetchCollectionsAsync","collectionRef","collection","snopshot","get","collectionsMap","error","message","fetchCollectionsStart","FETCH_COLLECTIONS_START","shopSaga"],"mappings":"AAAA,SAAQA,UAAR,EAAoBC,IAApB,EAA0BC,GAA1B,EAA+BC,GAA/B,QAA0C,oBAA1C,C,CACA;AACA;AACA;;AAEA,SAASC,SAAT,EAAoBC,+BAApB,QAA2D,+BAA3D;AAEA,SAASC,uBAAT,EAAkCC,uBAAlC,QAAiE,gBAAjE;AAEA,OAAOC,eAAP,MAA4B,cAA5B,C,CAEA;;AAEA,OAAO,UAAUC,qBAAV,GAAiC;AACpC,MAAG;AACC,UAAMC,aAAa,GAAGN,SAAS,CAACO,UAAV,CAAqB,aAArB,CAAtB;AACA,UAAMC,QAAQ,GAAG,MAAMF,aAAa,CAACG,GAAd,EAAvB;AACA,UAAMC,cAAc,GAAG,MAAMb,IAAI,CAACI,+BAAD,EAAkCO,QAAlC,CAAjC;AACA,UAAMV,GAAG,CAACI,uBAAuB,CAACQ,cAAD,CAAxB,CAAT;AACH,GALD,CAKC,OAAMC,KAAN,EAAa;AACV,UAAMb,GAAG,CAACK,uBAAuB,CAACQ,KAAK,CAACC,OAAP,CAAxB,CAAT;AACH,GARmC,CASpC;AACA;AAEK;AACG;AACA;AACA;AACA;;AACX;AAED,OAAO,UAAUC,qBAAV,GAAkC;AACrC,QAAMjB,UAAU,CACZQ,eAAe,CAACU,uBADJ,EAEZT,qBAFY,CAAhB;AAIH;AAED,OAAO,UAAUU,QAAV,GAAqB;AACxB,QAAMhB,GAAG,CAAC,CACNF,IAAI,CAACgB,qBAAD,CADE,CAAD,CAAT;AAGH","sourcesContent":["import {takeLatest, call, put, all } from 'redux-saga/effects';\n//it listen for every action of a specific type that we pass to it\n//it create a non blocking call in order to not stop application to run \n// put is saga effects for creating action\n\nimport { firestore, convertCollectionsSnopshotToMap } from '../../firebase/firebase.utils';\n\nimport { fetchCollectionsSuccess, fetchCollectionsFailure } from './shop-actions';\n\nimport ShopActionTypes from './shop-types';\n\n//generator function syntax is for saga, every generator function must have yield in it\n\nexport function* fetchCollectionsAsync(){\n    try{\n        const collectionRef = firestore.collection('collections');\n        const snopshot = yield collectionRef.get();\n        const collectionsMap = yield call(convertCollectionsSnopshotToMap, snopshot);\n        yield put(fetchCollectionsSuccess(collectionsMap));\n    }catch(error) {\n        yield put(fetchCollectionsFailure(error.message));\n    }\n    //call 後面括號裡面，第一個para可以是一個method/function, 第二個para,是前面function的parameter\n    //yield call 是之前寫的const collectionsMap = convertCollectionsSnopshotToMap(snopshot);saga替代版本\n    \n         //thunk version\n            // collectionRef.get().then(snopshot => {\n            //     const collectionsMap = convertCollectionsSnopshotToMap(snopshot);\n            //     dispatch(fetchCollectionsSuccess(collectionsMap));\n            // }).catch(error => dispatch(fetchCollectionsFailure(error.message)))\n}\n\nexport function* fetchCollectionsStart() {\n    yield takeLatest(\n        ShopActionTypes.FETCH_COLLECTIONS_START, \n        fetchCollectionsAsync\n        );\n}\n\nexport function* shopSaga() {\n    yield all([\n        call(fetchCollectionsStart)\n    ])\n}\n\n\n"]},"metadata":{},"sourceType":"module"}