{"ast":null,"code":"import firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\nconst config = {\n  apiKey: \"AIzaSyB3JWqfupxwdXkbgBI3GHjUlDISvI9R0Fg\",\n  authDomain: \"clothing-30928.firebaseapp.com\",\n  databaseURL: \"https://clothing-30928.firebaseio.com\",\n  projectId: \"clothing-30928\",\n  storageBucket: \"clothing-30928.appspot.com\",\n  messagingSenderId: \"7839175547\",\n  appId: \"1:7839175547:web:af0dc379d7e862fa1563de\",\n  measurementId: \"G-RBL2EMBXCZ\"\n};\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return;\n  const userRef = firestore.doc(`/user/${userAuth.uid}`); // uid是在這裡console.log(userAuth)裡面得到的一系列東西的google產生的一個id\n\n  const snapShot = await userRef.get();\n\n  if (!snapShot.exists) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createAt = new Date();\n\n    try {\n      await userRef.set({\n        displayName,\n        email,\n        createAt,\n        ...additionalData\n      });\n    } catch (error) {\n      console.log('error creating user', error.message);\n    }\n  } // 這個if statement是在判斷如果沒有這個新登陸的用戶資料，就新創造一個，如果有，就什麼都不用做\n\n\n  return userRef;\n};\nexport const addCollectionAndDocuments = async (collectionKey, objectsToAdd) => {\n  const collectionRef = firestore.collection(collectionKey);\n  const batch = firestore.batch();\n  objectsToAdd.forEach(obj => {\n    const newDocRef = collectionRef.doc();\n    batch.set(newDocRef, obj); //batch是firestore裡面的一個method，目的跟上面的userRef.set的目的是一樣的，只不過這個是用在collection上面的\n  });\n  return await batch.commit();\n}; //這個是一次性的function，目的是為了讓shop_data這個資料庫能夠上傳到firebase database，但是可以留在這裡不用刪除，以防以後還需要updata\n//寫完這個function之後，去app.js(因為app.js可以接觸到shop_data,而且did amount是只會render一次的，which is what we need, \n//this function will run once, once the firebase got the data, it will be deleted)\n\nexport const convertCollectionsSnopshotToMap = collections => {\n  const transformedCollection = collections.docs.map(doc => {\n    const {\n      title,\n      items\n    } = doc.data();\n    return {\n      routeName: encodeURI(title.toLowerCase()),\n      id: doc.id,\n      title,\n      items\n    };\n  });\n  return transformedCollection.reduce((accmulator, collection) => {\n    accmulator[collection.title.toLowerCase()] = collection;\n    return accmulator;\n  }, {});\n}; //這個function的作用是要把firebase得到的array轉換成snopshot object,而且還要把routeName, id都加進來\n\nexport const getCurrentUser = () => {\n  return new Promise((resolve, reject) => {\n    const unsubscribe = auth.onAuthStateChanged(userAuth => {\n      unsubscribe();\n      resolve(userAuth);\n    }, reject);\n  });\n};\nfirebase.initializeApp(config);\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\nexport const googleProvider = new firebase.auth.GoogleAuthProvider();\ngoogleProvider.setCustomParameters({\n  prompt: 'select_account'\n});\nexport const signInWithGoogle = () => auth.signInWithPopup(googleProvider);\nexport default firebase;","map":{"version":3,"sources":["/Users/vicky/Documents/clothing-saga/src/firebase/firebase.utils.js"],"names":["firebase","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","createUserProfileDocument","userAuth","additionalData","userRef","firestore","doc","uid","snapShot","get","exists","displayName","email","createAt","Date","set","error","console","log","message","addCollectionAndDocuments","collectionKey","objectsToAdd","collectionRef","collection","batch","forEach","obj","newDocRef","commit","convertCollectionsSnopshotToMap","collections","transformedCollection","docs","map","title","items","data","routeName","encodeURI","toLowerCase","id","reduce","accmulator","getCurrentUser","Promise","resolve","reject","unsubscribe","auth","onAuthStateChanged","initializeApp","googleProvider","GoogleAuthProvider","setCustomParameters","prompt","signInWithGoogle","signInWithPopup"],"mappings":"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","sourcesContent":["import firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\n\nconst config = {\n    apiKey: \"AIzaSyB3JWqfupxwdXkbgBI3GHjUlDISvI9R0Fg\",\n    authDomain: \"clothing-30928.firebaseapp.com\",\n    databaseURL: \"https://clothing-30928.firebaseio.com\",\n    projectId: \"clothing-30928\",\n    storageBucket: \"clothing-30928.appspot.com\",\n    messagingSenderId: \"7839175547\",\n    appId: \"1:7839175547:web:af0dc379d7e862fa1563de\",\n    measurementId: \"G-RBL2EMBXCZ\"\n  };\n\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n    if(!userAuth) return;\n    const userRef = firestore.doc(`/user/${userAuth.uid}`);\n    // uid是在這裡console.log(userAuth)裡面得到的一系列東西的google產生的一個id\n    const snapShot = await userRef.get();\n    if(!snapShot.exists){\n        const {displayName, email } = userAuth;\n        const createAt = new Date();\n        try{\n            await userRef.set({displayName, email, createAt, ...additionalData})\n        }catch(error) {\n            console.log('error creating user', error.message)\n        }\n    }\n    // 這個if statement是在判斷如果沒有這個新登陸的用戶資料，就新創造一個，如果有，就什麼都不用做\n    return userRef;\n}\n\nexport const addCollectionAndDocuments = async (collectionKey, objectsToAdd)=> {\n    const collectionRef = firestore.collection(collectionKey);\n\n    const batch = firestore.batch();\n    objectsToAdd.forEach(obj => {\n        const newDocRef = collectionRef.doc();\n        batch.set(newDocRef, obj);\n        //batch是firestore裡面的一個method，目的跟上面的userRef.set的目的是一樣的，只不過這個是用在collection上面的\n    });\n\n    return await batch.commit();\n}\n//這個是一次性的function，目的是為了讓shop_data這個資料庫能夠上傳到firebase database，但是可以留在這裡不用刪除，以防以後還需要updata\n//寫完這個function之後，去app.js(因為app.js可以接觸到shop_data,而且did amount是只會render一次的，which is what we need, \n//this function will run once, once the firebase got the data, it will be deleted)\n\n\nexport const convertCollectionsSnopshotToMap = collections => {\n    const transformedCollection = collections.docs.map(doc => {\n        const { title, items } =  doc.data();\n\n        return{\n            routeName: encodeURI(title.toLowerCase()),\n            id: doc.id,\n            title, \n            items\n        }\n    });\n    return transformedCollection.reduce((accmulator, collection)=> {\n        accmulator[collection.title.toLowerCase()]= collection;\n        return accmulator;\n    }, {});\n};\n//這個function的作用是要把firebase得到的array轉換成snopshot object,而且還要把routeName, id都加進來\n\nexport const getCurrentUser = ()=> {\n    return new Promise ((resolve, reject)=> {\n        const unsubscribe = auth.onAuthStateChanged(userAuth => {\n            unsubscribe();\n            resolve(userAuth);\n        }, reject)\n    });\n}\n\n\n  firebase.initializeApp(config);\n\n  export const auth = firebase.auth();\n  export const firestore = firebase.firestore();\n\n  export const googleProvider = new firebase.auth.GoogleAuthProvider();\n  googleProvider.setCustomParameters({prompt: 'select_account'});\n  export const signInWithGoogle = () => auth.signInWithPopup(googleProvider);\n\n  export default firebase;"]},"metadata":{},"sourceType":"module"}