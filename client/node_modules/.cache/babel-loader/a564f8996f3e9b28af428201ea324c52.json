{"ast":null,"code":"import { takeLatest, put, all, call } from 'redux-saga/effects';\nimport { auth, googleProvider, createUserProfileDocument, getCurrentUser } from '../../firebase/firebase.utils';\nimport UserActionTypes from './user-type';\nimport { signinSuccess, signinFailure, signoutSuccess, signoutFailure, signUpSuccess, signUpFailure } from './user-action'; //---------------reuseable generator function---------------\n\nexport function* getSnapshotFromUserAuth(userAuth, additionalData) {\n  try {\n    const userRef = yield call(createUserProfileDocument, userAuth, additionalData);\n    const userSnapshot = yield userRef.get();\n    yield put(signinSuccess({\n      id: userSnapshot.id,\n      ...userSnapshot.data()\n    }));\n  } catch (error) {\n    yield put(signinFailure(error));\n  }\n} //---------------reuseable generator function---------------\n\nexport function* signInWithGoogle() {\n  try {\n    const {\n      user\n    } = yield auth.signInWithPopup(googleProvider);\n    const userRef = yield call(createUserProfileDocument, user);\n    const userSnapshot = yield userRef.get();\n    yield put(signinSuccess({\n      id: userSnapshot.id,\n      ...userSnapshot.data()\n    }));\n  } catch (error) {\n    yield put(signinFailure(error));\n  }\n}\nexport function* signInWithEmail({\n  payload: {\n    email,\n    password\n  }\n}) {\n  try {\n    const {\n      user\n    } = yield auth.signInWithEmailAndPassword(email, password);\n    const userRef = yield call(createUserProfileDocument, user);\n    const userSnapshot = yield userRef.get();\n    yield put(signinSuccess({\n      id: userSnapshot.id,\n      ...userSnapshot.data()\n    }));\n  } catch (error) {\n    yield put(signinFailure(error));\n  }\n} // try{\n//     await auth.signInWithEmailAndPassword(email, password);\n//     this.setState({email: '', password: ''})\n// }catch(error){\n//     console.log('error', error.message)\n// }\n\nexport function* isUserAuthenticated() {\n  try {\n    const userAuth = yield getCurrentUser();\n    if (!userAuth) return;\n    const userRef = yield call(createUserProfileDocument, userAuth);\n    const userSnapshot = yield userRef.get();\n    yield put(signinSuccess({\n      id: userSnapshot.id,\n      ...userSnapshot.data()\n    }));\n  } catch (error) {\n    yield put(signinFailure(error));\n  }\n} //在上面三個geenrator function裡面，大部分的code都是一樣的\n//其實可以在action裡面直接合併，在這個file裡面另外寫一個reuserable generator function以便signInWithGoogle/signInWithEmail重複利用\n\nexport function* signOut() {\n  try {\n    yield auth.signOut();\n    yield put(signoutSuccess());\n  } catch (error) {\n    yield put(signoutFailure(error));\n  }\n}\nexport function* signUp({\n  payload: {\n    email,\n    password,\n    displayName\n  }\n}) {\n  try {\n    const {\n      user\n    } = yield auth.createUserWithEmailAndPassword(email, password);\n    yield put(signUpSuccess({\n      user,\n      additionalData: {\n        displayName\n      }\n    }));\n  } catch (error) {\n    yield put(signUpFailure(error));\n  }\n}\nexport function* signInAfterSignUp({\n  payload: {\n    user,\n    additionalData\n  }\n}) {\n  yield getSnapshotFromUserAuth(user, additionalData);\n}\nexport function* onEmailSigninStart() {\n  yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, signInWithEmail);\n}\nexport function* onGoogleSigninStart() {\n  yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle);\n}\nexport function* onCheckUserSession() {\n  yield takeLatest(UserActionTypes.CHECK_USER_SESSION, isUserAuthenticated);\n}\nexport function* onSignOutStart() {\n  yield takeLatest(UserActionTypes.SIGN_OUT_START, signOut);\n}\nexport function* onSignUpStart() {\n  yield takeLatest(UserActionTypes.SIGN_UP_START, signUp);\n}\nexport function* onSignUpSuccess() {\n  yield takeLatest(UserActionTypes.SIGN_UP_SUCCESS, signInAfterSignUp);\n}\nexport function* userSaga() {\n  yield all([call(onGoogleSigninStart), call(onEmailSigninStart), call(onCheckUserSession), call(onSignOutStart), call(onSignUpStart), call(onSignUpSuccess)]);\n}","map":{"version":3,"sources":["/Users/vicky/Documents/clothing-saga/client/src/redux/user/user-saga.js"],"names":["takeLatest","put","all","call","auth","googleProvider","createUserProfileDocument","getCurrentUser","UserActionTypes","signinSuccess","signinFailure","signoutSuccess","signoutFailure","signUpSuccess","signUpFailure","getSnapshotFromUserAuth","userAuth","additionalData","userRef","userSnapshot","get","id","data","error","signInWithGoogle","user","signInWithPopup","signInWithEmail","payload","email","password","signInWithEmailAndPassword","isUserAuthenticated","signOut","signUp","displayName","createUserWithEmailAndPassword","signInAfterSignUp","onEmailSigninStart","EMAIL_SIGN_IN_START","onGoogleSigninStart","GOOGLE_SIGN_IN_START","onCheckUserSession","CHECK_USER_SESSION","onSignOutStart","SIGN_OUT_START","onSignUpStart","SIGN_UP_START","onSignUpSuccess","SIGN_UP_SUCCESS","userSaga"],"mappings":"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","sourcesContent":["import { takeLatest, put, all, call } from 'redux-saga/effects';\n\nimport { auth, googleProvider, createUserProfileDocument, getCurrentUser } from '../../firebase/firebase.utils';\n\nimport UserActionTypes from './user-type';\nimport { signinSuccess, signinFailure, signoutSuccess, signoutFailure, signUpSuccess, signUpFailure } from './user-action';\n\n//---------------reuseable generator function---------------\n\nexport function* getSnapshotFromUserAuth(userAuth, additionalData) {\n    try{\n        const userRef = yield call(createUserProfileDocument, userAuth, additionalData);\n        const userSnapshot = yield userRef.get();\n        yield put(signinSuccess({id: userSnapshot.id, ...userSnapshot.data()}))\n    }catch(error){\n        yield put(signinFailure(error));\n    }\n}\n//---------------reuseable generator function---------------\n\nexport function* signInWithGoogle () {\n    try{\n        const {user} = yield auth.signInWithPopup(googleProvider);\n        const userRef = yield call(createUserProfileDocument, user);\n        const userSnapshot = yield userRef.get();\n        yield put(signinSuccess({id: userSnapshot.id, ...userSnapshot.data()}))\n    }catch(error){\n        yield put(signinFailure(error));\n    }\n}\n\nexport function* signInWithEmail({payload: {email, password}}) {\n    try{\n        const { user } = yield auth.signInWithEmailAndPassword(email, password);\n        const userRef = yield call(createUserProfileDocument, user);\n        const userSnapshot = yield userRef.get();\n        yield put(signinSuccess({id: userSnapshot.id, ...userSnapshot.data()}))\n    }catch(error) {\n        yield put(signinFailure(error));\n    }\n}\n\n  // try{\n        //     await auth.signInWithEmailAndPassword(email, password);\n        //     this.setState({email: '', password: ''})\n        // }catch(error){\n        //     console.log('error', error.message)\n        // }\n\nexport function* isUserAuthenticated() {\n    try{\n        const userAuth = yield getCurrentUser();\n        if (!userAuth) return;\n        const userRef = yield call(createUserProfileDocument, userAuth);\n        const userSnapshot = yield userRef.get();\n        yield put(signinSuccess({id: userSnapshot.id, ...userSnapshot.data()}))\n    }catch(error){\n        yield put(signinFailure(error));\n    }\n}\n//在上面三個geenrator function裡面，大部分的code都是一樣的\n//其實可以在action裡面直接合併，在這個file裡面另外寫一個reuserable generator function以便signInWithGoogle/signInWithEmail重複利用\n\nexport function* signOut() {\n    try{\n        yield auth.signOut();\n        yield put(signoutSuccess());\n    }catch(error){\n        yield put(signoutFailure(error))\n    }\n}\n\nexport function* signUp({payload: {email, password, displayName}}) {\n    try{\n        const { user } = yield auth.createUserWithEmailAndPassword(email, password);\n        yield put(signUpSuccess({user, additionalData: {displayName}}));\n    }catch(error){\n        yield put(signUpFailure(error))\n    }\n}\n\nexport function* signInAfterSignUp({payload: {user, additionalData}}) {\n    yield getSnapshotFromUserAuth(user, additionalData)\n}\n\n\nexport function* onEmailSigninStart () {\n    yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, signInWithEmail)\n}\n\nexport function* onGoogleSigninStart () {\n    yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle)\n}\n\nexport function* onCheckUserSession () {\n    yield takeLatest(UserActionTypes.CHECK_USER_SESSION, isUserAuthenticated)\n}\n\nexport function* onSignOutStart() {\n    yield takeLatest(UserActionTypes.SIGN_OUT_START, signOut)\n}\n\nexport function* onSignUpStart() {\n    yield takeLatest(UserActionTypes.SIGN_UP_START,signUp)\n}\n\nexport function* onSignUpSuccess() {\n    yield takeLatest(UserActionTypes.SIGN_UP_SUCCESS,signInAfterSignUp)\n}\n\nexport function* userSaga(){\n    yield all([\n        call(onGoogleSigninStart),\n        call(onEmailSigninStart),\n        call(onCheckUserSession),\n        call(onSignOutStart),\n        call(onSignUpStart),\n        call(onSignUpSuccess)\n    ]);\n}"]},"metadata":{},"sourceType":"module"}